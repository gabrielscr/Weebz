using System.Collections.Generic;
using System.Linq;

namespace CodeGeneration.Ts
{
    public class TsTemplate
    {
        public string Render(IEnumerable<TsType> model)
        {
            var builder = new IndentedStringBuilder();

            builder.Append($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     Esse código foi gerado por uma ferramenta.
//
//     Mudanças neste arquivo podem causar comportamento incorreto e serão perdidas
//     quando o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------");
            builder.AppendLine();

            var modules = model
                .OrderBy(m => m.Module)
                .ThenBy(m => m.Name)
                .GroupBy(m => m.Module);

            foreach (var module in modules)
            {
                builder.AppendLine($"module Api.{module.Key} {{");

                var firstTsType = true;

                foreach (var tsType in module)
                    using (builder.Indent())
                    {
                        if (!firstTsType)
                            builder.AppendLine();

                        firstTsType = false;

                        if (tsType.IsEnum)
                        {
                            builder.AppendLine($"export enum {tsType.Name} {{");

                            foreach (var property in tsType.Properties)
                                using (builder.Indent())
                                {
                                    builder.AppendLine($"{property.Name} = {property.DefaultValue},");
                                }

                            builder.AppendLine("}");
                        }
                        else
                        {
                            builder.AppendLine($"export interface {tsType.Name} {{");

                            foreach (var property in tsType.Properties)
                                using (builder.Indent())
                                {
                                    var nullable = property.IsNullable ? "?" : "";
                                    var array = property.IsArray ? "[]" : "";

                                    var name =
                                        property.TsType.Module == tsType.Module
                                        || property.TsType.Module == module.Key
                                        ? property.TsType.Name
                                        : property.TsType.FullName;

                                    builder.AppendLine($"{property.Name}{nullable}: {name}{array};");
                                }

                            builder.AppendLine("}");
                        }
                    }

                builder.AppendLine("}");
                builder.AppendLine();
            }

            builder.AppendLine($"export default Api");

            return builder.ToString();
        }
    }
}
